---
name: build

on:
  push:
    ignore-paths:
      - '**.md'
  pull_request:
    ignore-paths:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest
    continue-on-error: ${{ ! matrix.stable }}
    strategy:
      matrix:
        os:
          - fedora:latest
          - quay.io/centos/centos:stream10-development
          - quay.io/centos/centos:stream9
          - debian:testing
          - debian:latest
          - ubuntu:rolling
          - ubuntu:latest
        stable: [true]
        include:
          - os: quay.io/fedora/fedora:rawhide
            stable: false
          - os: ubuntu:devel
            stable: false
    steps:
      - name: Install Git
        run: >
          bash -exc "case ${DISTRO} in debian:*|ubuntu:*)
          apt-get update ; apt-get -y install git
          ;; *fedora:*|*centos:*) yum -y install git ;; esac ;
          git config --global --add safe.directory ${GITHUB_WORKSPACE}"

      - uses: actions/checkout@v4

      - name: Show OS information
        run: |
          cat /etc/os-release 2>/dev/null || echo /etc/os-release not available

      - name: Install build dependencies
        run: bash .github/workflows/install-dependencies

      - name: Build clevis
        run: >
          version="$(git describe --exact-match HEAD 2>/dev/null
          || { printf 20. ; git rev-parse --short HEAD ; })" ;
          echo "${version}" > VERSION.TXT ;
          mkdir -p build && cd build ;
          export ninja=$(command -v ninja) ;
          [ -z "${ninja}" ] && export ninja=$(command -v ninja-build) ;
          export CFLAGS="-g -coverage" ;
          meson .. || cat meson-logs/meson-log.txt >&2 ;
          ${ninja}

      - name: Run tests
        run: |
          cd build
          if ! meson test ; then
              cat meson-logs/testlog.txt >&2
              exit -1
          fi

      - name: Show full test logs
        run: cat build/meson-logs/testlog.txt >&2

      - name: Build OS package
        run: bash .github/workflows/build-package

      - name: Collect OS Package Builds
        uses: actions/upload-artifact@v4
        with:
          name: packages for ${{ matrix.os }}
          path: |
            /output/*.deb
            /output/*.rpm
    container:
      image: ${{matrix.os}}
      env:
        DISTRO: ${{matrix.os}}
      options: --privileged --device /dev/loop-control

# vim:set ts=2 sw=2 et:
